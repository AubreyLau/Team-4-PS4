ConstantBuffer RenderObjectData
{
	column_major matrix modelMatrix;
};

ConstantBuffer CameraData
{
	column_major matrix camMatrix;
};

struct VS_INPUT
{
	float3 Position		: POSITION0;
	float2 UV			: TEXCOORD0;
	float3 Normal		: TEXCOORD1;
	float3 Tangent		: TEXCOORD2;
	float3 lightPos;
	float3 cameraPos;

};

struct VS_OUTPUT
{
	float4 Position		: S_POSITION;
	float2 UV			: TEXCOORD0; 
	float3 vN;//new
	float3 vT;
	float3 binormal ;//new
	float3 lightPos;
};

VS_OUTPUT main(VS_INPUT Input)
{

	VS_OUTPUT Output; 

	Output.Position = mul(mul(camMatrix,modelMatrix), float4(Input.Position.xyz, 1));
	//Output.Color = Input.Color;
	Output.UV = Input.UV;
	float3 incident = normalize(Input.Position-Input.cameraPos);
	float3 vN = normalize(mul(float4(Input.Normal,0), mul(camMatrix,modelMatrix)).xyz);
  float3 vT = normalize(mul(float4(Input.Tangent,0), mul(camMatrix,modelMatrix)).xyz);

//	matrix normalMatrix = transpose ( inverse ( modelMatrix ));
//	Output.Normal = normalize (normalMatrix *  normalize (Input.Normal ));

	return Output;
}
