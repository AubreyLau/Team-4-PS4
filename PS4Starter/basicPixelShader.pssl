
SamplerState samp0 : register(s0);
//SamplerState samp1 : register(s1);

Texture2D colorMap : register( t0 );
Texture2D bumpMap : register( t1 );


struct VS_OUTPUT
{
	float4 Position		: S_POSITION;
	float2 UV			: TEXCOORD0;
	float3 vN;//new
	float3 vT;
	float3 binormal ;//new
	float3 lightPos;
	float3 cameraPos;
    float3	lightColour;
     float 	lightIntensity;
	 float 	radius;
};

float4 main(VS_OUTPUT In) : S_TARGET_OUTPUT
{

float lightRadius=In.radius;
     float3 vN = In.vN;
	const float3 vT = In.vT.xyz;
	const float3 vB = In.vT.z * cross(vN, vT);
	//float3 vL =  In.lightPos.xyz - In.vPosInView;





// bump test!!!!!!!

 //row_major float3x3  TBN = float3x3 ( In.vT , In.binormal , In.vN );
//float3 normal = normalize ( TBN * ( bumpMap.Sample(samp0, In.UV.xy). rgb * 2.0 - 1.0));  //TBN._11_22_33???
 //// vN=normal;
//
 //


 //
	//float3 incident = normalize (In.Position - In.cameraPos );
float3 incident = normalize (In.lightPos - In.Position );

 float lambert = max (0.15 , dot ( incident ,vN )); // Different !
//
 float dist = length ( In.lightPos - In.Position );
 float atten = 1.0 - clamp ( dist / lightRadius , 0.18 , 0.9);
  float lightIntensity =In.	lightIntensity;
  lightIntensity =8.8f;







	float3 viewDir = normalize (   (In.cameraPos,1)-In.Position);
	float3 halfDir = normalize ( incident + viewDir );
  float rFactor = max (0.0 , dot ( halfDir , vN  )); // Different !
  float sFactor = pow ( rFactor , 33.0 );

	float3 lightColour = ( In.lightColour . rgb );
    lightColour += (  In.lightColour . rgb * sFactor )*0.33;
	float4 c=(lightColour,1);

	float4 test = colorMap.Sample(samp0, In.UV.xy)*0.9+c*0.2;
	 test=float4(test * atten * lambert *lightIntensity);
	 // test=float4(test * lambert*test);
	// test=float4(lambert,lambert,lambert,1);
	// test.xyz=vN;



//	 test=float4(viewDir,1);











	 return test;
}  